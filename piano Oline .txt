<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>虚拟钢琴</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
            color: white;
            padding: 20px;
            overflow-x: auto;
        }
        
        .container {
            width: 100%;
            max-width: 1400px;
            text-align: center;
        }
        
        header {
            margin-bottom: 30px;
        }
        
        h1 {
            font-size: 2.8rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }
        
        .description {
            font-size: 1.1rem;
            margin-bottom: 20px;
            opacity: 0.9;
        }
        
        .piano-container {
            background: rgba(0, 0, 0, 0.7);
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            margin-bottom: 30px;
            overflow-x: auto;
            position: relative;
        }
        
        .scroll-hint {
            position: absolute;
            top: 10px;
            right: 20px;
            font-size: 0.8rem;
            opacity: 0.7;
            display: flex;
            align-items: center;
        }
        
        .scroll-hint svg {
            margin-left: 5px;
        }
        
        .piano {
            position: relative;
            height: 220px;
            display: flex;
            margin: 0 auto;
            min-width: 1200px;
        }
        
        .key {
            cursor: pointer;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-end;
            padding-bottom: 10px;
            user-select: none;
            transition: transform 0.1s ease;
        }
        
        .key:active {
            transform: translateY(2px);
        }
        
        .white-key {
            width: 30px;
            height: 100%;
            background: linear-gradient(to bottom, #fff 0%, #f5f5f5 100%);
            border: 1px solid #ccc;
            border-radius: 0 0 5px 5px;
            color: #333;
            z-index: 1;
            margin-right: -1px;
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
        }
        
        .white-key.active {
            background: linear-gradient(to bottom, #e0e0e0 0%, #d0d0d0 100%);
            box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.2);
        }
        
        .black-key {
            width: 20px;
            height: 60%;
            background: linear-gradient(to bottom, #333 0%, #000 100%);
            border-radius: 0 0 4px 4px;
            color: white;
            z-index: 2;
            margin-left: -10px;
            margin-right: -10px;
            box-shadow: 0 3px 5px rgba(0, 0, 0, 0.5);
        }
        
        .black-key.active {
            background: linear-gradient(to bottom, #222 0%, #111 100%);
            box-shadow: inset 0 2px 3px rgba(0, 0, 0, 0.5);
        }
        
        .note-name {
            font-size: 0.6rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .key-label {
            font-size: 0.7rem;
            background: rgba(0, 0, 0, 0.2);
            padding: 2px 4px;
            border-radius: 3px;
            min-width: 16px;
        }
        
        .white-key .key-label {
            color: #333;
        }
        
        .black-key .key-label {
            color: white;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        
        button {
            padding: 12px 25px;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50px;
            color: white;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(5px);
        }
        
        button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        
        .active-control {
            background: rgba(255, 255, 255, 0.4);
            border-color: rgba(255, 255, 255, 0.6);
        }
        
        .keyboard-hint {
            margin-top: 20px;
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 20px;
            margin-top: 30px;
            text-align: left;
            max-width: 900px;
        }
        
        .instructions h2 {
            margin-bottom: 15px;
            text-align: center;
        }
        
        .instructions ul {
            list-style-position: inside;
            padding-left: 10px;
        }
        
        .instructions li {
            margin-bottom: 10px;
            line-height: 1.5;
        }
        
        .key-mapping {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 15px;
        }
        
        .key-mapping-item {
            display: flex;
            justify-content: space-between;
            padding: 5px 10px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
        }
        
        .octave-display {
            margin-top: 15px;
            font-size: 1rem;
            font-weight: bold;
        }
        
        .visitor-info {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            text-align: center;
            font-size: 0.9rem;
        }
        
        .visitor-info p {
            margin: 5px 0;
        }
        
        footer {
            margin-top: 30px;
            font-size: 0.9rem;
            opacity: 0.7;
        }
        
        /* 横屏提示样式 */
        .landscape-notice {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.85);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            color: white;
            text-align: center;
            padding: 20px;
        }
        
        .landscape-notice h2 {
            font-size: 2.5rem;
            margin-bottom: 20px;
            color: #fdbb2d;
        }
        
        .landscape-notice p {
            font-size: 1.5rem;
            margin-bottom: 30px;
        }
        
        .landscape-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            animation: rotate 2s infinite;
        }
        
        @keyframes rotate {
            0% { transform: rotate(0deg); }
            50% { transform: rotate(90deg); }
            100% { transform: rotate(0deg); }
        }
        
        @media (max-width: 768px) {
            .piano {
                height: 180px;
            }
            
            .white-key {
                width: 20px;
            }
            
            .black-key {
                width: 14px;
                margin-left: -7px;
                margin-right: -7px;
            }
            
            h1 {
                font-size: 2.2rem;
            }
            
            .note-name, .key-label {
                font-size: 0.5rem;
            }
        }
        
        @media (orientation: landscape) {
            .landscape-notice {
                display: none;
            }
        }

/* 对话框样式 */
.dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.dialog-overlay.active {
    opacity: 1;
    visibility: visible;
}

.dialog-box {
    background-color: white;
    border-radius: 10px;
    padding: 25px;
    max-width: 400px;
    width: 90%;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    transform: translateY(20px);
    transition: transform 0.3s ease;
    text-align: center;
}

.dialog-overlay.active .dialog-box {
    transform: translateY(0);
}

.dialog-title {
    font-size: 22px;
    color: #333;
    margin-bottom: 15px;
}

.dialog-message {
    font-size: 16px;
    color: #666;
    margin-bottom: 20px;
}

.dialog-button {
    background-color: #4a6ee0;
    color: white;
    border: none;
    padding: 10px 25px;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.dialog-button:hover {
    background-color: #3a5ecf;
}

/* 可点击文字样式 */
.clickable-text {
    color: #4a6ee0;
    cursor: pointer;
    text-decoration: underline;
    transition: color 0.3s ease;
}

.clickable-text:hover {
    color: #3a5ecf;
}

/* 对话框样式 */
.dialog-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.dialog-overlay.active {
    opacity: 1;
    visibility: visible;
}

.dialog-box {
    background-color: white;
    border-radius: 10px;
    padding: 25px;
    max-width: 400px;
    width: 90%;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    transform: translateY(20px);
    transition: transform 0.3s ease;
    text-align: center;
}

.dialog-overlay.active .dialog-box {
    transform: translateY(0);
}

.dialog-title {
    font-size: 22px;
    color: #333;
    margin-bottom: 15px;
}

.dialog-message {
    font-size: 16px;
    color: #666;
    margin-bottom: 20px;
}

.dialog-button {
    background-color: #4a6ee0;
    color: white;
    border: none;
    padding: 10px 25px;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.dialog-button:hover {
    background-color: #3a5ecf;
}

/* 可点击文字样式 */
.clickable-text {
    color: #4a6ee0;
    cursor: pointer;
    text-decoration: underline;
    transition: color 0.3s ease;
}

.clickable-text:hover {
    color: #3a5ecf;
}
    </style>
</head>
<body>
    <!-- 横屏提示 -->
    <div class="landscape-notice" id="landscapeNotice">
        <div class="landscape-icon">📱</div>
        <h2>横屏使用效果更佳</h2>
        <p>请将设备旋转至横屏模式</p>
    </div>

    <div class="container">
        <header>
            <h1>虚拟钢琴</h1>
                   </header>
        
        <div class="piano-container">
            <div class="scroll-hint">
                滚动以查看所有琴键
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M7 10l5 5 5-5"/>
                </svg>
            </div>
            <div class="piano" id="piano">
                <!-- 琴键将通过JavaScript动态生成 -->
            </div>
            
            <div class="controls">
                <button id="sustainBtn">右踏板: 关</button>
                <button id="recordBtn">开始录音</button>
                <button id="playBtn" disabled>播放录音</button>
                <button id="clearBtn">清除录音</button>
                <button id="octaveUpBtn">提高八度</button>
                <button id="octaveDownBtn">降低八度</button>
            </div>
            
            <div class="octave-display" id="octaveDisplay">当前八度: 4 (中央C)</div>
            
            <p class="keyboard-hint">每个琴键上都标注了对应的键盘按键</p>
            
            <!-- 访问者信息 -->
            <div class="visitor-info" id="visitorInfo">
                <p>正在获取您的信息...</p>
            </div>
        </div>
        
        <div class="instructions">
            <h2>键盘映射说明</h2>
            <ul>
                <li><strong>白键</strong>: 使用键盘中间行按键 (A S D F G H J K L ; ')</li>
                <li><strong>黑键</strong>: 使用键盘上方的数字键 (1 2 4 5 6)</li>
                <li><strong>八度切换</strong>: 使用 [ 和 ] 键切换八度</li>
                <li><strong>延音效果</strong>: 按空格键开启/关闭延音</li>
                <li><strong>录音功能</strong>: 按 R 键开始/停止录音，P 键播放录音</li>
            </ul>
            
            <div class="key-mapping">
                <div class="key-mapping-item"><span>白键 (下八度):</span> <span>Z X C V B N M , . /</span></div>
                <div class="key-mapping-item"><span>白键 (当前八度):</span> <span>A S D F G H J K L ; '</span></div>
                <div class="key-mapping-item"><span>白键 (上八度):</span> <span>Q W E R T Y U I O P</span></div>
                <div class="key-mapping-item"><span>黑键 (下八度):</span> <span>S D G H J</span></div>
                <div class="key-mapping-item"><span>黑键 (当前八度):</span> <span>1 2 4 5 6</span></div>
                <div class="key-mapping-item"><span>黑键 (上八度):</span> <span>W E T Y U</span></div>
                <div class="key-mapping-item"><span>八度上:</span> <span>]</span></div>
                <div class="key-mapping-item"><span>八度下:</span> <span>[</span></div>
                <div class="key-mapping-item"><span>右踏板:</span> <span>空格键</span></div>
                <div class="key-mapping-item"><span>录音:</span> <span>R</span></div>
                <div class="key-mapping-item"><span>播放:</span> <span>P</span></div>
            </div>
        </div>
        
    <!-- 对话框HTML结构 -->
   </div>

<!-- 对话框HTML结构 -->
<div class="dialog-overlay" id="dialogOverlay">
    <div class="dialog-box">
        <h2 class="dialog-title">你好！</h2>
        <p class="dialog-message">欢迎访问我们的网站！</p>
        <button class="dialog-button" onclick="hideDialog()">确定</button>
    </div>
</div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const piano = document.getElementById('piano');
            const sustainBtn = document.getElementById('sustainBtn');
            const recordBtn = document.getElementById('recordBtn');
            const playBtn = document.getElementById('playBtn');
            const clearBtn = document.getElementById('clearBtn');
            const octaveUpBtn = document.getElementById('octaveUpBtn');
            const octaveDownBtn = document.getElementById('octaveDownBtn');
            const octaveDisplay = document.getElementById('octaveDisplay');
            const landscapeNotice = document.getElementById('landscapeNotice');
            const visitorInfo = document.getElementById('visitorInfo');
            
            let audioContext;
            let sustain = false;
            let isRecording = false;
            let recordedNotes = [];
            let startTime;
            let currentOctave = 4; // 中央C所在的八度
            
            // 1. 显示横屏提示1.5秒
            setTimeout(() => {
                landscapeNotice.style.display = 'none';
            }, 1500);
            
            // 2. 获取访问者IP和位置信息
            async function getVisitorInfo() {
                try {
                    // 使用ipapi.co获取IP和位置信息
                    const response = await fetch('https://ipapi.co/json/');
                    const data = await response.json();
                    
                    visitorInfo.innerHTML = `
                        <p><strong>您的IP地址:</strong> ${data.ip}</p>
                        <p><strong>您的位置:</strong> ${data.city}, ${data.region}, ${data.country_name}</p>
                        <p><strong>网络提供商:</strong> ${data.org}</p>
                    `;
                } catch (error) {
                    console.error('获取IP信息失败:', error);
                    // 备用方案：使用ipify获取IP地址
                    try {
                        const ipResponse = await fetch('https://api.ipify.org?format=json');
                        const ipData = await ipResponse.json();
                        visitorInfo.innerHTML = `
                            <p><strong>您的IP地址:</strong> ${ipData.ip}</p>
                            <p>无法获取详细位置信息</p>
                        `;
                    } catch (fallbackError) {
                        console.error('备用IP获取也失败:', fallbackError);
                        visitorInfo.innerHTML = `<p>无法获取IP和位置信息</p>`;
                    }
                }
            }
            
            // 钢琴键配置 - 完整88键钢琴从A0到C8
            const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];
            
            // 完整的键盘映射 - 覆盖三个八度范围
            const keyboardMap = {
                // 下八度白键 (Z-/)
                'z': {noteIndex: 0, octaveOffset: -1}, 'x': {noteIndex: 2, octaveOffset: -1},
                'c': {noteIndex: 4, octaveOffset: -1}, 'v': {noteIndex: 5, octaveOffset: -1},
                'b': {noteIndex: 7, octaveOffset: -1}, 'n': {noteIndex: 9, octaveOffset: -1},
                'm': {noteIndex: 11, octaveOffset: -1}, ',': {noteIndex: 0, octaveOffset: 0},
                '.': {noteIndex: 2, octaveOffset: 0}, '/': {noteIndex: 4, octaveOffset: 0},
                
                // 当前八度白键 (A-')
                'a': {noteIndex: 0, octaveOffset: 0}, 's': {noteIndex: 2, octaveOffset: 0},
                'd': {noteIndex: 4, octaveOffset: 0}, 'f': {noteIndex: 5, octaveOffset: 0},
                'g': {noteIndex: 7, octaveOffset: 0}, 'h': {noteIndex: 9, octaveOffset: 0},
                'j': {noteIndex: 11, octaveOffset: 0}, 'k': {noteIndex: 0, octaveOffset: 1},
                'l': {noteIndex: 2, octaveOffset: 1}, ';': {noteIndex: 4, octaveOffset: 1},
                "'": {noteIndex: 5, octaveOffset: 1},
                
                // 上八度白键 (Q-P)
                'q': {noteIndex: 7, octaveOffset: 1}, 'w': {noteIndex: 9, octaveOffset: 1},
                'e': {noteIndex: 11, octaveOffset: 1}, 'r': {noteIndex: 0, octaveOffset: 2},
                't': {noteIndex: 2, octaveOffset: 2}, 'y': {noteIndex: 4, octaveOffset: 2},
                'u': {noteIndex: 5, octaveOffset: 2}, 'i': {noteIndex: 7, octaveOffset: 2},
                'o': {noteIndex: 9, octaveOffset: 2}, 'p': {noteIndex: 11, octaveOffset: 2},
                
                // 下八度黑键 (S, D, G, H, J)
                's': {noteIndex: 1, octaveOffset: -1}, 'd': {noteIndex: 3, octaveOffset: -1},
                'g': {noteIndex: 6, octaveOffset: -1}, 'h': {noteIndex: 8, octaveOffset: -1},
                'j': {noteIndex: 10, octaveOffset: -1},
                
                // 当前八度黑键 (1, 2, 4, 5, 6)
                '1': {noteIndex: 1, octaveOffset: 0}, '2': {noteIndex: 3, octaveOffset: 0},
                '4': {noteIndex: 6, octaveOffset: 0}, '5': {noteIndex: 8, octaveOffset: 0},
                '6': {noteIndex: 10, octaveOffset: 0},
                
                // 上八度黑键 (W, E, T, Y, U)
                'w': {noteIndex: 1, octaveOffset: 1}, 'e': {noteIndex: 3, octaveOffset: 1},
                't': {noteIndex: 6, octaveOffset: 1}, 'y': {noteIndex: 8, octaveOffset: 1},
                'u': {noteIndex: 10, octaveOffset: 1}
            };
            
            // 键盘按键到显示标签的映射
            const keyLabels = {
                // 白键
                'z': 'Z', 'x': 'X', 'c': 'C', 'v': 'V', 'b': 'B', 'n': 'N', 'm': 'M', ',': ',', '.': '.', '/': '/',
                'a': 'A', 's': 'S', 'd': 'D', 'f': 'F', 'g': 'G', 'h': 'H', 'j': 'J', 'k': 'K', 'l': 'L', ';': ';', "'": "'",
                'q': 'Q', 'w': 'W', 'e': 'E', 'r': 'R', 't': 'T', 'y': 'Y', 'u': 'U', 'i': 'I', 'o': 'O', 'p': 'P',
                // 黑键
                '1': '1', '2': '2', '4': '4', '5': '5', '6': '6'
            };
            
            // 初始化音频上下文
            function initAudio() {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            }
            
            // 生成钢琴键
            function createPianoKeys() {
                piano.innerHTML = '';
                
                // 创建完整的88键钢琴 (A0到C8)
                for (let octave = 0; octave <= 8; octave++) {
                    for (let noteIndex = 0; noteIndex < 12; noteIndex++) {
                        // 跳过不存在的键
                        if (octave === 0 && noteIndex < 9) continue; // A0之前没有键
                        if (octave === 8 && noteIndex > 0) continue; // C8之后没有键
                        
                        const noteName = noteNames[noteIndex];
                        const isBlackKey = noteName.includes('#');
                        const keyElement = document.createElement('div');
                        
                        keyElement.className = `key ${isBlackKey ? 'black-key' : 'white-key'}`;
                        keyElement.dataset.note = `${noteName}${octave}`;
                        keyElement.dataset.frequency = getFrequency(noteIndex, octave);
                        
                        // 添加音符名称
                        const noteNameElement = document.createElement('div');
                        noteNameElement.className = 'note-name';
                        // 只显示部分标签以避免混乱
                        if ((octave === 4 && noteIndex === 0) || // C4
                            (octave === 0 && noteIndex === 9) || // A0
                            (octave === 8 && noteIndex === 0)) { // C8
                            noteNameElement.textContent = `${noteName}${octave}`;
                        }
                        keyElement.appendChild(noteNameElement);
                        
                        // 添加键盘标签
                        const keyLabel = findKeyLabel(noteName, octave);
                        if (keyLabel) {
                            const keyLabelElement = document.createElement('div');
                            keyLabelElement.className = 'key-label';
                            keyLabelElement.textContent = keyLabel;
                            keyElement.appendChild(keyLabelElement);
                        }
                        
                        keyElement.addEventListener('mousedown', () => playNote(noteName, octave, keyElement));
                        keyElement.addEventListener('mouseup', () => stopNote(keyElement));
                        keyElement.addEventListener('mouseleave', () => stopNote(keyElement));
                        
                        // 触摸设备支持
                        keyElement.addEventListener('touchstart', (e) => {
                            e.preventDefault();
                            playNote(noteName, octave, keyElement);
                        });
                        keyElement.addEventListener('touchend', (e) => {
                            e.preventDefault();
                            stopNote(keyElement);
                        });
                        
                        piano.appendChild(keyElement);
                    }
                }
            }
            
            // 根据音符和八度找到对应的键盘标签
            function findKeyLabel(noteName, octave) {
                const noteIndex = noteNames.indexOf(noteName);
                
                for (const [key, mapping] of Object.entries(keyboardMap)) {
                    const actualOctave = currentOctave + mapping.octaveOffset;
                    if (actualOctave === octave && mapping.noteIndex === noteIndex) {
                        return keyLabels[key] || key.toUpperCase();
                    }
                }
                
                return null;
            }
            
            // 播放音符 - 使用更柔和的音色
            function playNote(note, octave, keyElement) {
                if (!audioContext) {
                    initAudio();
                }
                
                // 添加激活状态
                keyElement.classList.add('active');
                
                // 记录音符（如果正在录音）
                if (isRecording) {
                    const currentTime = Date.now() - startTime;
                    recordedNotes.push({
                        note: note,
                        octave: octave,
                        time: currentTime,
                        duration: 500 // 默认持续时间
                    });
                }
                
                // 创建振荡器
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                const filter = audioContext.createBiquadFilter();
                
                // 设置频率
                const frequency = getFrequency(noteNames.indexOf(note), octave);
                oscillator.frequency.value = frequency;
                
                // 使用更柔和的波形 - 三角波和正弦波混合
                oscillator.type = 'triangle';
                
                // 添加低通滤波器使音色更柔和
                filter.type = 'lowpass';
                filter.frequency.value = 2000; // 降低高频成分
                filter.Q.value = 0.5; // 适中的共振值
                
                // 连接节点: 振荡器 -> 滤波器 -> 增益 -> 输出
                oscillator.connect(filter);
                filter.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                // 设置更自然的音量包络
                const now = audioContext.currentTime;
                gainNode.gain.setValueAtTime(0, now);
                
                // 快速起音
                gainNode.gain.linearRampToValueAtTime(0.3, now + 0.02);
                
                // 较短的衰减
                gainNode.gain.exponentialRampToValueAtTime(0.15, now + 0.1);
                
                // 延音处理
                if (sustain) {
                    // 延音开启时，音符持续更长时间但会自然衰减
                    gainNode.gain.exponentialRampToValueAtTime(0.001, now + 1.5); // 1.5秒衰减
                } else {
                    // 无延音时，音符快速衰减
                    gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.8); // 0.8秒衰减
                }
                
                // 开始播放
                oscillator.start();
                
                // 存储振荡器引用以便停止
                keyElement.dataset.oscillator = JSON.stringify({
                    oscillator: oscillator,
                    gainNode: gainNode
                });
            }
            
            // 停止音符
            function stopNote(keyElement) {
                keyElement.classList.remove('active');
                
                const oscillatorData = keyElement.dataset.oscillator;
                if (oscillatorData) {
                    const { oscillator, gainNode } = JSON.parse(oscillatorData);
                    
                    if (oscillator && gainNode && !sustain) {
                        // 如果不是延音模式，快速释放音符
                        const now = audioContext.currentTime;
                        gainNode.gain.cancelScheduledValues(now);
                        gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.1);
                        
                        setTimeout(() => {
                            oscillator.stop();
                        }, 100);
                    }
                    
                    // 清除引用
                    delete keyElement.dataset.oscillator;
                }
            }
            
            // 根据音符和八度获取频率
            function getFrequency(noteIndex, octave) {
                // 标准音A4 = 440Hz
                const A4_FREQUENCY = 440;
                const A4_OCTAVE = 4;
                const A4_INDEX = 9; // A在noteNames数组中的索引
                
                // 计算半音距离
                const semitonesFromA4 = (octave - A4_OCTAVE) * 12 + (noteIndex - A4_INDEX);
                
                // 计算频率
                return A4_FREQUENCY * Math.pow(2, semitonesFromA4 / 12);
            }
            
            // 键盘事件处理
            function handleKeyDown(event) {
                const key = event.key.toLowerCase();
                
                // 特殊功能键
                if (key === ' ') {
                    event.preventDefault();
                    toggleSustain();
                    return;
                } else if (key === 'r') {
                    event.preventDefault();
                    toggleRecording();
                    return;
                } else if (key === 'p') {
                    event.preventDefault();
                    playRecording();
                    return;
                } else if (key === ']') {
                    event.preventDefault();
                    changeOctave(1);
                    return;
                } else if (key === '[') {
                    event.preventDefault();
                    changeOctave(-1);
                    return;
                }
                
                if (keyboardMap.hasOwnProperty(key)) {
                    event.preventDefault();
                    
                    const mapping = keyboardMap[key];
                    const noteIndex = mapping.noteIndex;
                    const octaveOffset = mapping.octaveOffset;
                    const noteName = noteNames[noteIndex];
                    const actualOctave = currentOctave + octaveOffset;
                    
                    // 确保八度在有效范围内
                    if (actualOctave < 0 || actualOctave > 8) return;
                    
                    // 查找对应的键元素
                    const keyElement = document.querySelector(`.key[data-note="${noteName}${actualOctave}"]`);
                    
                    if (keyElement && !keyElement.classList.contains('active')) {
                        playNote(noteName, actualOctave, keyElement);
                    }
                }
            }
            
            function handleKeyUp(event) {
                const key = event.key.toLowerCase();
                
                if (keyboardMap.hasOwnProperty(key)) {
                    event.preventDefault();
                    
                    const mapping = keyboardMap[key];
                    const noteIndex = mapping.noteIndex;
                    const octaveOffset = mapping.octaveOffset;
                    const noteName = noteNames[noteIndex];
                    const actualOctave = currentOctave + octaveOffset;
                    
                    // 确保八度在有效范围内
                    if (actualOctave < 0 || actualOctave > 8) return;
                    
                    const keyElement = document.querySelector(`.key[data-note="${noteName}${actualOctave}"]`);
                    
                    if (keyElement) {
                        stopNote(keyElement);
                    }
                }
            }
            
            // 改变八度
            function changeOctave(delta) {
                currentOctave = Math.max(0, Math.min(8, currentOctave + delta));
                updateOctaveDisplay();
                updateKeyLabels();
            }
            
            // 更新八度显示
            function updateOctaveDisplay() {
                let octaveName = "中央C";
                if (currentOctave < 4) octaveName = "低音区";
                if (currentOctave > 4) octaveName = "高音区";
                
                octaveDisplay.textContent = `当前八度: ${currentOctave} (${octaveName})`;
                octaveUpBtn.textContent = `提高八度 (${currentOctave})`;
                octaveDownBtn.textContent = `降低八度 (${currentOctave})`;
            }
            
            // 更新键盘标签
            function updateKeyLabels() {
                const keys = document.querySelectorAll('.key');
                keys.forEach(key => {
                    const noteFull = key.dataset.note;
                    const noteName = noteFull.slice(0, -1);
                    const octave = parseInt(noteFull.slice(-1));
                    
                    const keyLabel = findKeyLabel(noteName, octave);
                    const keyLabelElement = key.querySelector('.key-label');
                    
                    if (keyLabelElement) {
                        keyLabelElement.textContent = keyLabel || '';
                    }
                });
            }
            
            // 切换延音
            function toggleSustain() {
                sustain = !sustain;
                sustainBtn.textContent = `延音: ${sustain ? '开' : '关'}`;
                
                if (sustain) {
                    sustainBtn.classList.add('active-control');
                } else {
                    sustainBtn.classList.remove('active-control');
                    
                    // 关闭延音时停止所有正在延音的音符
                    const activeKeys = document.querySelectorAll('.key.active');
                    activeKeys.forEach(key => {
                        const oscillatorData = key.dataset.oscillator;
                        if (oscillatorData) {
                            const { oscillator, gainNode } = JSON.parse(oscillatorData);
                            if (oscillator && gainNode) {
                                const now = audioContext.currentTime;
                                gainNode.gain.cancelScheduledValues(now);
                                gainNode.gain.exponentialRampToValueAtTime(0.001, now + 0.2);
                                
                                setTimeout(() => {
                                    oscillator.stop();
                                    key.classList.remove('active');
                                }, 200);
                            }
                        }
                    });
                }
            }
            
            // 切换录音
            function toggleRecording() {
                isRecording = !isRecording;
                
                if (isRecording) {
                    recordedNotes = [];
                    startTime = Date.now();
                    recordBtn.textContent = '停止录音';
                    playBtn.disabled = true;
                    recordBtn.classList.add('active-control');
                } else {
                    recordBtn.textContent = '开始录音';
                    playBtn.disabled = false;
                    recordBtn.classList.remove('active-control');
                }
            }
            
            // 播放录音
            function playRecording() {
                if (recordedNotes.length === 0) return;
                
                recordedNotes.forEach(note => {
                    setTimeout(() => {
                        const keyElement = document.querySelector(`.key[data-note="${note.note}${note.octave}"]`);
                        if (keyElement) {
                            playNote(note.note, note.octave, keyElement);
                            
                            setTimeout(() => {
                                stopNote(keyElement);
                            }, note.duration);
                        }
                    }, note.time);
                });
            }
            
            // 按钮事件处理
            sustainBtn.addEventListener('click', toggleSustain);
            
            recordBtn.addEventListener('click', toggleRecording);
            
            playBtn.addEventListener('click', playRecording);
            
            clearBtn.addEventListener('click', function() {
                recordedNotes = [];
                playBtn.disabled = true;
            });
            
            octaveUpBtn.addEventListener('click', function() {
                changeOctave(1);
            });
            
            octaveDownBtn.addEventListener('click', function() {
                changeOctave(-1);
            });
            
            // 初始化
            createPianoKeys();
            updateOctaveDisplay();
            getVisitorInfo(); // 获取访问者信息
            
            // 添加键盘事件监听
            document.addEventListener('keydown', handleKeyDown);
            document.addEventListener('keyup', handleKeyUp);
        });
            // 显示对话框
            function showDialog() {
            document.getElementById('dialogOverlay').classList.add('active');
            }

            // 隐藏对话框
            function hideDialog() {
            document.getElementById('dialogOverlay').classList.remove('active');
            }

            // 点击遮罩层关闭对话框
            document.getElementById('dialogOverlay').addEventListener('click', function(e) {
            if (e.target === this) {
            hideDialog();
            }
            });

            // 按ESC键关闭对话框
            document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
            hideDialog();
            }
            });

    </script>
</body>
</html>